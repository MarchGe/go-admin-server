// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: grpc/service/sys_stats_service.proto

package service

import (
	context "context"
	model "github.com/MarchGe/go-admin-server/app/admin/grpc/pb/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysStatsService_ReportSystemStats_FullMethodName     = "/service.SysStatsService/reportSystemStats"
	SysStatsService_ReportHostInformation_FullMethodName = "/service.SysStatsService/reportHostInformation"
)

// SysStatsServiceClient is the client API for SysStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysStatsServiceClient interface {
	// report performance statistics frequently
	ReportSystemStats(ctx context.Context, in *model.SysStats, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// report host information, only report once after agent started
	ReportHostInformation(ctx context.Context, in *model.HostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sysStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysStatsServiceClient(cc grpc.ClientConnInterface) SysStatsServiceClient {
	return &sysStatsServiceClient{cc}
}

func (c *sysStatsServiceClient) ReportSystemStats(ctx context.Context, in *model.SysStats, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SysStatsService_ReportSystemStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysStatsServiceClient) ReportHostInformation(ctx context.Context, in *model.HostInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SysStatsService_ReportHostInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysStatsServiceServer is the server API for SysStatsService service.
// All implementations must embed UnimplementedSysStatsServiceServer
// for forward compatibility
type SysStatsServiceServer interface {
	// report performance statistics frequently
	ReportSystemStats(context.Context, *model.SysStats) (*emptypb.Empty, error)
	// report host information, only report once after agent started
	ReportHostInformation(context.Context, *model.HostInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedSysStatsServiceServer()
}

// UnimplementedSysStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSysStatsServiceServer struct {
}

func (UnimplementedSysStatsServiceServer) ReportSystemStats(context.Context, *model.SysStats) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSystemStats not implemented")
}
func (UnimplementedSysStatsServiceServer) ReportHostInformation(context.Context, *model.HostInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHostInformation not implemented")
}
func (UnimplementedSysStatsServiceServer) mustEmbedUnimplementedSysStatsServiceServer() {}

// UnsafeSysStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysStatsServiceServer will
// result in compilation errors.
type UnsafeSysStatsServiceServer interface {
	mustEmbedUnimplementedSysStatsServiceServer()
}

func RegisterSysStatsServiceServer(s grpc.ServiceRegistrar, srv SysStatsServiceServer) {
	s.RegisterService(&SysStatsService_ServiceDesc, srv)
}

func _SysStatsService_ReportSystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SysStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysStatsServiceServer).ReportSystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysStatsService_ReportSystemStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysStatsServiceServer).ReportSystemStats(ctx, req.(*model.SysStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysStatsService_ReportHostInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.HostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysStatsServiceServer).ReportHostInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysStatsService_ReportHostInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysStatsServiceServer).ReportHostInformation(ctx, req.(*model.HostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// SysStatsService_ServiceDesc is the grpc.ServiceDesc for SysStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.SysStatsService",
	HandlerType: (*SysStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reportSystemStats",
			Handler:    _SysStatsService_ReportSystemStats_Handler,
		},
		{
			MethodName: "reportHostInformation",
			Handler:    _SysStatsService_ReportHostInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/service/sys_stats_service.proto",
}
